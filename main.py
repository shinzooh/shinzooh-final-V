from fastapi import FastAPI, Request
import os, datetime, asyncio, requests, telegram
from urllib3.util.retry import Retry
from requests.adapters import HTTPAdapter

app = FastAPI()

# ุฅุนุฏุงุฏ ุงูุจูุช
bot = telegram.Bot(token=os.getenv("TELEGRAM_TOKEN"))
chat_id = os.getenv("TELEGRAM_CHAT_ID")

# ุฅุนุฏุงุฏ ููุงุชูุญ ุงูุฐูุงุก ุงูุงุตุทูุงุนู
XAI_KEY = os.getenv("XAI_API_KEY")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")

# ุฅุนุฏุงุฏ session ูุน retries
session = requests.Session()
retries = Retry(total=3, backoff_factor=1, status_forcelist=[500, 502, 503, 504])
session.mount("https://", HTTPAdapter(max_retries=retries))

# ุชุญููู xAI (ICT/SMC ุฏููู ุฌุฏูุง)
async def get_xai_analysis(symbol, frame, data_str):
    prompt = f"""
    ุชุญููู ุงุญุชุฑุงูู ูุฑูุฒ {symbol} ุนูู ูุฑูู {frame} ุจุงุณุชุฎุฏุงู ICT & SMC (ุฏูุฉ 10000%): BOSุ CHoCHุ FVGุ OBุ ุงูุณูููุฉุ Premium/Discount. 
    ูุคุดุฑุงุช: RSIุ EMAุ MACD ุจุฏูุฉ ุฃุฑูุงู ูุงุถุญุฉ. 
    ุฃุนุทูู ุงูุชูุตูุฉ ุงูููุงุฆูุฉ (ุดุฑุงุก/ุจูุน)ุ ูุน ููุทุฉ ุงูุฏุฎููุ ุงููุฏูุ ุงูุณุชูุจุ ุณุจุจ ุงูุชูุตูุฉ ุงูููู. 
    ุดุฑุท: ูุง ูุชุฌุงูุฒ ุงูุงูุนูุงุณ 30 ููุทุฉ. 
    ุจูุงูุงุช: {data_str}
    """
    try:
        res = session.post(
            "https://api.x.ai/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {XAI_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "grok-4-0709",
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 1200
            },
            timeout=60
        )
        res.raise_for_status()
        return res.json()["choices"][0]["message"]["content"]
    except Exception as e:
        print("โ xAI Error:", str(e))
        return "โ ุชุญููู xAI ุบูุฑ ูุชุงุญ ุญุงูููุง (fallback - ุฑุงูุจ ุงูุณูููุฉ ูุงููุคุดุฑุงุช ูุฏูููุง)."

@app.post("/webhook")
async def webhook(request: Request):
    try:
        raw = await request.body()
        data = dict([item.split("=") for item in raw.decode().split(",")])
        symbol = data.get("SYMB")
        tf = data.get("TF")
        price = data.get("C", "N/A")

        # ูุคุดุฑุงุช ุฑูููุฉ (ูุน ุญูุงูุฉ NaN)
        def safe_float(val):
            try:
                return float(val)
            except:
                return 0

        rsi = safe_float(data.get("RSI"))
        ema = safe_float(data.get("EMA"))
        macd = safe_float(data.get("MACD"))
        bull_fvg = safe_float(data.get("BULL_FVG_CE"))
        bear_fvg = safe_float(data.get("BEAR_FVG_CE"))
        csd_up = int(data.get("CSD_UP", 0))
        csd_dn = int(data.get("CSD_DN", 0))

        # ุชุญููู ุงูุงุชุฌุงู
        direction = "ุดุฑุงุก โ (BOS ุตุงุนุฏ, CSDโ, MACD>0)" if csd_up > csd_dn and macd > 0 else \
                    "ุจูุน โ (CHoCH ูุงุจุท, CSDโ, MACD<0)" if csd_dn > csd_up and macd < 0 else \
                    "No trade"

        # ุชุญููู xAI
        analysis = await get_xai_analysis(symbol, tf, raw.decode()) if direction != "No trade" else "โณ ูุง ุชูุฌุฏ ูุฑุตุฉ ูุคูุฏุฉ ุงูุขู."

        # ุฑุณุงูุฉ ุชููุฌุฑุงู
        msg = f"""๐ ุชุญููู {symbol} | ูุฑูู {tf}
ุงูุณุนุฑ ุงูุญุงูู: {price}
๐ ุงูุงุชุฌุงู ุงููุชููุน: {direction}

๐ ุชุญููู ICT & SMC + ููุงุณููู:
{analysis}

๐ RSI: {rsi}
๐ EMA: {ema}
๐ MACD: {macd}
๐ FVG ุตุนูุฏู: {bull_fvg}
๐ FVG ูุจูุทู: {bear_fvg}
๐ฉ CSD ุดุฑุงุก: {csd_up}
๐ฅ CSD ุจูุน: {csd_dn}

๐ {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        if direction != "No trade":
            await bot.send_message(chat_id=chat_id, text=msg)
        else:
            print("๐ธ No trade, skipping...")
        return {"status": "ok"}

    except Exception as e:
        print("โ ERROR:", e)
        return {"status": "error", "detail": str(e)}
